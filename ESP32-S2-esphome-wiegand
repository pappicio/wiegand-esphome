
esphome:
  name: apriporte-wiegand
  friendly_name: apriporte wiegand
  name_add_mac_suffix: false

################################################################
esp32:
  board: lolin_s2_mini
  variant: ESP32S2
  framework:
    type: arduino


################################################################
preferences:
  flash_write_interval: 1sec
################################################################
 
logger:
  level: debug
  logs:
    text_sensor: error
    number: ERROR
    sensor: ERROR
    ultrasonic.sensor: ERROR
    sntp: NONE  # Impedisce che i log di sincronizzazione SNTP vengano visualizzati

    #wiegand: WARN


# Enable Home Assistant API
api:

##############################################################
# Allow Over-The-Air updates
ota:
  - platform: esphome
    password: !secret ota_password
##############################################################
# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  networks:
    - ssid: peppe4
    - password: !secret wifi_password4
    - ssid: peppe2
    - password: !secret wifi_password2
    - ssid: peppe1
    - password: !secret wifi_password1
  manual_ip:
    static_ip: 192.168.1.79
    gateway: 192.168.1.1
    subnet: 255.255.255.0
    dns1: 192.168.1.1

  ap:
    {}

captive_portal:
 
#########################################################################
web_server:
  ota: false  # Puoi anche disabilitare l'OTA se non vuoi usarlo dalla pagina web di ESPHome
  version: 3
  auth:
    username: !secret web_server_username
    password: !secret web_server_password
#########################################################################

text_sensor:
  - platform: wifi_info
    ssid:
      name: "wifi connesso a:"
      web_server:
        sorting_weight: 70
      
  - platform: template
    name: "Uptime:"
    web_server:
      sorting_weight: 81
    lambda: |-
      int seconds = (id(uptimex).state);
      String days = String(seconds / (24 * 3600));
      seconds = seconds % (24 * 3600); 
      String hours = String(seconds / 3600);
      if (hours.length() == 1)
      {
      hours="0" + hours;
      }
      seconds = seconds % 3600;
      String minutes = String(seconds /  60);
      if (minutes.length() == 1)
      {
      minutes="0" + minutes;
      }
      String second = String(seconds % 60);
      if (second.length() == 1)
      {
      second="0" + second;
      }
      return { (days +" g; " + hours +" h " + minutes +" m e "+ second +" s").c_str() };
      //return { (String(days) +"g " + String(hours) +"h:" + String(minutes) +"m:"+ String(seconds) +"s").c_str() };
 
    icon: mdi:clock-start
    update_interval: 5s

  - platform: template
    name: "Badge Autorizzati"
    id: homeassistant_tag_scanned
    icon: mdi:badge-account
    web_server:
      sorting_weight: 20
    lambda: |-
      std::string result;
      for (const auto& tag : id(tag_history)) {
        result += tag + ", \n";
      }
      if (!result.empty()) {
        result.pop_back();
        result.pop_back();
      }
      return { result.c_str() };
    update_interval: 5s


  - platform: template
    name: "Password autorizzate"
    id: keypad_codes_sensor
    web_server:
      sorting_weight: 21
    lambda: |-
      std::string result;
      for (const auto& code : id(keypad_code_history)) {
          result += code + ", \n";
      }
      if (!result.empty()) {
          result.pop_back();
          result.pop_back();
      }
      return { result.c_str() };
    update_interval: 5s
    icon: mdi:form-textbox-password

  - platform: template
    name: "Impronte autorizzate"
    web_server:
      sorting_weight: 22
    id: fingerprint_scanned_sensor
    lambda: |-
      std::string result;
      for (const auto& print : id(fingerprint_history)) {
          result += print + ", \n";
      }
      if (!result.empty()) {
          result.pop_back();
          result.pop_back();
      }
      return { result.c_str() };
    update_interval: 5s
    icon: mdi:fingerprint
 


  # Text sensor per le password non autorizzate
  - platform: template
    name: "Password Non Autorizzate"
    web_server:
      sorting_weight: 23
    id: unauthorized_keypad_codes_sensor
    lambda: |-
      std::string result;
      for (const auto& code : id(unauthorized_keypad_codes)) {
          result += code + ", \n";
      }
      if (!result.empty()) {
          result.pop_back();
          result.pop_back();
      }
      return { result.c_str() };
    update_interval: 5s
    icon: mdi:form-textbox-password

  # Text sensor per i badge non autorizzati
  - platform: template
    name: "Badge o impronte non autorizzati"
    web_server:
      sorting_weight: 24
    id: unauthorized_tags_sensor
    lambda: |-
      std::string result;
      for (const auto& tag : id(unauthorized_tags)) {
          result += tag + ", \n";
      }
      if (!result.empty()) {
          result.pop_back();
          result.pop_back();
      }
      return { result.c_str() };
    update_interval: 5s
    icon: mdi:account-off



  - platform: template
    name: "Ultima Password non valida"
    id: last_unauthorized_keypad_code_sensor
    update_interval: never
    icon: "mdi:lock-alert"
    web_server:
      sorting_weight: 50

  - platform: template
    name: "Ultimo TAG o Impronta non valido"
    id: last_unauthorized_tag_code_sensor
    update_interval: never
    icon: "mdi:fingerprint-off"
    web_server:
      sorting_weight: 51

  - platform: template
    id: user_name_sensor
    name: "Ultimo accesso"
    icon: "mdi:account"
    web_server:
      sorting_weight: 52

  - platform: template
    id: user_name_sensor2
    name: "User Name2"
    internal: True

    web_server:
      sorting_weight: 53
  - platform: template
    internal: True
    name: "Tag Riconosciuto"
    id: tag_name
  
  - platform: template
    name: "Time:"
    internal: true
    id: formatted_counter_sensor
    lambda: |-
      auto now = id(sntp_time).now();
      if (!now.is_valid()) return std::string("NO TIME");
      char buffer[20];
      snprintf(buffer, sizeof(buffer), "%02d.%02d-%02d:%02d:%02d",
               now.day_of_month, now.month, now.hour, now.minute, now.second);
      return std::string(buffer);
    update_interval: 1s
    icon: "mdi:numeric"



#########################################################################
  - platform: template
    name: "Buzzer Citofono"
    id: citofono_log
    icon: "mdi:clipboard-text"
    update_interval: never
    web_server:
      sorting_weight: 54

  - platform: homeassistant
    id: citofono_visitatore
    entity_id: binary_sensor.citofono_visitatore
    on_value:
      then:
        - if:
            condition:
              lambda: 'return x == "on";'
            then:
              - lambda: |-
                  // Ottieni il tempo sincronizzato con SNTP
                  auto now = id(sntp_time).now();
                  char timestamp[20];
                  snprintf(timestamp, sizeof(timestamp), "%02d.%02d-%02d:%02d:%02d",
                           now.day_of_month, now.month,
                           now.hour, now.minute, now.second);
                  // Se la dimensione del buffer è >= 10, rimuovi la voce più vecchia
                  if (id(citofono_log_buffer).size() >= 10) {
                    id(citofono_log_buffer).erase(id(citofono_log_buffer).begin());
                  }

                  // Aggiungi nuova voce
                  id(citofono_log_buffer).push_back(std::string(timestamp));

                  // Costruisci la stringa del log
                  std::string log;
                  for (const auto& entry : id(citofono_log_buffer)) {
                    log += entry + ", ";
                  }

                  // Rimuovi l'ultimo " " se presente
                  if (!log.empty()) log.erase(log.size() - 1);

                  // Pubblica il log aggiornato
                  id(citofono_log).publish_state(log);
                  id(citofono_log_string) = log;
#########################################################################

time:
  - platform: sntp
    id: sntp_time
    timezone: "Europe/Rome"  # Imposta la tua zona oraria
    servers:
      - "0.pool.ntp.org"
      - "1.pool.ntp.org"
      - "2.pool.ntp.org"
    update_interval: 1h  # Sincronizza ogni minuto
  
 

sensor:
  - platform: wifi_signal
    name: "Segnale WiFi"
    web_server:
      sorting_weight: 80
    update_interval: 10s

  - platform: uptime
    name: "Uptime"
    internal: true
    id: uptimex
    update_interval: 5s
# Usa un output GPIO con id "led_builtin"
 
binary_sensor:
  - platform: template
    name: "Apertura Valida"
    id: apertura_valida_sensor
    icon: mdi:lock-open-variant
    web_server:
      sorting_weight: 1
    lambda: |-
      return id(apertura_valida);
    on_press:
      then:
        - delay: 3000ms
        - globals.set:
            id: apertura_valida
            value: 'false'
  - platform: gpio
    pin:
      number: GPIO36
      mode: INPUT_PULLUP
    id: tamper_gpio
    name: pin tamper
    internal: true
    filters:
      - delayed_on: 100ms   # Filtra i falsi positivi quando il tamper è attivato
      - delayed_off: 100ms  # Filtra i falsi positivi quando il tamper è disattivato
    on_press:
      then:
        - lambda: |-
            id(tamper_state) = true;
            id(tamper_output).publish_state(true);
    on_release:  # Tamper OK (collegato = LOW)
      then:
        - lambda: |-
            // NON fare nulla quando è OK
            ESP_LOGD("tamper", "Tamper OK");


  - platform: template
    name: "Tamper in Allarme"
    id: tamper_output
    device_class: safety
    icon: mdi:lock
    web_server:
      sorting_weight: 2
    lambda: |-
      return id(tamper_state);

globals:

  - id: apertura_valida
    type: bool
    initial_value: 'false'  # Inizialmente il codice non è valido


  - id: last_formatted_code
    type: std::string
    initial_value: ""


  - id: fingerprint_history
    type: std::vector<std::string>
    initial_value: ""

  - id: keypad_code_history
    type: std::vector<std::string>
    initial_value: ""
  
  - id: tag_history
    type: std::vector<std::string>
    initial_value: ""
 

  # Aggiunta lista di password non autorizzate
  - id: unauthorized_keypad_codes
    type: std::vector<std::string>
    initial_value: ""

  # Aggiunta lista di badge non autorizzati
  - id: unauthorized_tags
    type: std::vector<std::string>
    initial_value: ""
  
  - id: last_tag
    type: uint64_t
    restore_value: True
    initial_value: '0'  # L'ultimo tag letto sarà un numero
 
  - id: led_state
    type: bool
    restore_value: no
    initial_value: 'false'

  - id: tamper_state
    type: bool
    restore_value: true
    initial_value: 'false'
##########################################à
  - id: citofono_log_string
    type: std::string
    restore_value: true
    initial_value: "\"\""

  - id: citofono_log_buffer
    type: std::vector<std::string>
    restore_value: false
    initial_value: 'std::vector<std::string>()'



#######################################################
output:
  - platform: ledc
    pin: GPIO18
    id: led_builtin
    frequency: 1000 Hz
interval:
  - interval: 1s
    then:
      - lambda: |-
          static bool led_state = false;
          led_state = !led_state;
          if (led_state) {
            id(led_builtin).set_level(1.0);   
          } else {
            id(led_builtin).set_level(0.0);  // spento
          }
#######################################################

switch:
  - platform: template
    internal: false
    restore_mode: ALWAYS_OFF 
    name: "portone cancello"
    icon: mdi:door
    web_server:
      sorting_weight: 10
    id: portone_cancello
    optimistic: true
    lambda: return id(portone_cancello).state;  
    on_turn_on: 
      then:
        - delay: 4s
        - switch.turn_off: portone_cancello


  - platform: template
    internal: false
    restore_mode: ALWAYS_OFF
    name: "spesa da prendere"
    icon: "mdi:shopping-cart"
    web_server:
      sorting_weight: 9
    id: spesa_da_prendere
    optimistic: true
    lambda: return id(spesa_da_prendere).state;  
    on_turn_on: 
      then:
        - delay: 1s
        - switch.turn_off: spesa_da_prendere


  - platform: gpio
    id: relay1
    pin: 
      number: GPIO37
      inverted: true
      mode: 
        output: True
        open_drain: True
    restore_mode: ALWAYS_OFF
    name: "Apri Portone"
    web_server:
      sorting_weight: 4
    icon: mdi:garage-open
    on_turn_on:
      - globals.set:
          id: apertura_valida
          value: 'true'
      - delay: 1000ms
      - switch.turn_off: relay1  # Spegne il relè dopo 1000ms

  - platform: gpio
    id: relay2
    pin: 
      number: GPIO38
      inverted: true
      mode: 
        output: True
        open_drain: True
    restore_mode: ALWAYS_OFF
    name: "Apri Cancello"
    web_server:
      sorting_weight: 5
    icon: mdi:gate
    on_turn_on:
      - globals.set:
          id: apertura_valida
          value: 'true'
      - delay: 1000ms
      - switch.turn_off: relay2  # Spegne il relè dopo 1000ms
 

  - platform: template
    id: tag_scan_enabled
    name: "Abilita Tastiera"
    web_server:
      sorting_weight: 3
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    icon: mdi:keyboard

  - platform: template
    id: clear_history_button
    name: "Cancella Storico"
    web_server:
      sorting_weight: 11
    icon: mdi:history
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    turn_on_action:
      - lambda: |-
          id(unauthorized_tags).clear();
          id(unauthorized_keypad_codes).clear();
          id(tag_history).clear();
          id(fingerprint_history).clear();
          id(keypad_code_history).clear();
          id(homeassistant_tag_scanned).publish_state("");
          id(last_unauthorized_keypad_code_sensor).publish_state("");
          id(last_unauthorized_tag_code_sensor).publish_state("");
          id(user_name_sensor).publish_state("");
          id(citofono_log).publish_state("");
          id(citofono_log_string) = "";
          id(citofono_log_buffer).clear();
      - delay: 500ms
      - switch.turn_off: clear_history_button
 


  - platform: template
    id: resetta_tamper
    name: "Reset Tamper"
    icon: mdi:restart
    web_server:
      sorting_weight: 12
    turn_on_action:
      - lambda: |-
          id(tamper_state) = false;
          id(tamper_output).publish_state(false);
          id(resetta_tamper).turn_off();
          id(resetta_tamper).publish_state(false);
      - delay: 500ms
      - switch.turn_off: resetta_tamper



key_collector:
  - id: pincode_reader
    source_id: mykeypad
    min_length: 6
    max_length: 9
    end_keys: "#"
    end_key_required: true
    clear_keys: "*"
    allowed_keys: "0123456789"
    timeout: 5s
    on_result:
      then:
        - lambda: |-
            std::string code = x;
            id(last_formatted_code) = code;
            std::string user_name = "Unknown";
            bool codice_valido = false;
            int relay = 0;

            //////////////////////////////////////////////////////////////////
            // Mappa dei codici validi e relativa azione (relay)
            std::map<std::string, std::pair<std::string, int>> codici_validi = {
              {"111111111", {"Pwd GLOBALE", 12}},
              {"222222222", {"Pwd CANCELLO", 1}},
              {"333333333", {"Pwd PORTONE", 2}}
            };
            //////////////////////////////////////////////////////////////////

            auto it = codici_validi.find(code);
            std::string timestamp = id(formatted_counter_sensor)->state.c_str();

            if (it != codici_validi.end()) {
              codice_valido = true;
              user_name = it->second.first;
              relay = it->second.second;
              id(user_name_sensor2)->publish_state(user_name);
              ESP_LOGI("ACCESSO", "Password VALIDA: %s", user_name.c_str());

              std::string voce = user_name + "(" + timestamp + ")";
              id(keypad_code_history).push_back(voce);
              if (id(keypad_code_history).size() > 24) {
                id(keypad_code_history).erase(id(keypad_code_history).begin());
              }

              std::string codes_concatenati;
              for (const auto& valid_code : id(keypad_code_history)) {
                codes_concatenati += valid_code ;  // Modifica qui
              }
              if (!codes_concatenati.empty()) {
                codes_concatenati.erase(codes_concatenati.size() - 1);  // Rimuove l'ultimo carattere di a capo in eccesso
              }

              id(keypad_codes_sensor)->publish_state(codes_concatenati);
              std::string combined = user_name + "(" + timestamp + ")";
              id(user_name_sensor)->publish_state(combined);

            } else {
              codice_valido = false;
              ESP_LOGW("ACCESSO", "Password NON valida: %s", code.c_str());

              std::string voce_errata = code + "(" + timestamp + ")";
              id(user_name_sensor2)->publish_state(code);
              id(unauthorized_keypad_codes).push_back(voce_errata);
              if (id(unauthorized_keypad_codes).size() > 24) {
                id(unauthorized_keypad_codes).erase(id(unauthorized_keypad_codes).begin());
              }

              std::string unauthorized_codes_concatenati;
              for (const auto& invalid_code : id(unauthorized_keypad_codes)) {
                unauthorized_codes_concatenati += invalid_code;  // Modifica qui
              }
              if (!unauthorized_codes_concatenati.empty()) {
                unauthorized_codes_concatenati.erase(unauthorized_codes_concatenati.size() - 1);  // Rimuove l'ultimo carattere di a capo in eccesso
              }

              id(unauthorized_keypad_codes_sensor)->publish_state(unauthorized_codes_concatenati);
              id(last_unauthorized_keypad_code_sensor)->publish_state(voce_errata);
            }

            // Attiva i relay SOLO se la tastiera è abilitata
            if (id(tag_scan_enabled).state) {
              if (id(tamper_state) == true) {
                ESP_LOGW("TAMPER", "Tastiera DISABILITATA!!! TAMPER IN ALLARME!!!");
              } else {
                if (codice_valido) {
                  if (relay == 1 && !id(accensione_relay1)->is_running())
                    id(accensione_relay1)->execute();
                  else if (relay == 2 && !id(accensione_relay2)->is_running())
                    id(accensione_relay2)->execute();
                  else if (relay == 12 && !id(accensione_relay12)->is_running())
                    id(accensione_relay12)->execute();
                }
              }
            } else {
              ESP_LOGI("KEYPAD", "Tastiera DISABILITATA");
            }
        - homeassistant.tag_scanned: !lambda 'return id(user_name_sensor2).state.c_str();'


######################################################
#external_components:
#  - source: 
#      type: local
#      path: ./components
#    components: [mywiegand]
######################################################


wiegand:
######################################################
#mywiegand:
######################################################

  - id: mykeypad
    d0: GPIO40
    d1: GPIO39

######################################################
    ###lockout_time: 5000ms
######################################################
    on_tag:
      - lambda: |-
          uint64_t tag = std::stoull(x.c_str());
          std::string name = "Unknown";
          std::string timestamp = id(formatted_counter_sensor)->state.c_str();
          bool autorizzato = false;
          int relay = 0;

          // === Mappe impronte ===
          std::map<uint64_t, std::pair<std::string, int>> impronte = {
            {121212211, {"Imp 11",   12}},
            {212121212, {"Imp 12",   12}},
            {232323232, {"Imp 13",   12}},
            {323232323, {"Imp 14",   12}},
            {454545454, {"Imp 21",   12}},
            {545454545, {"Imp 22",   12}},
            {656565656, {"Imp 23",   12}},
            {565656565, {"Imp 24",   12}},
            {676767676, {"Imp 31",   12}},
            {767676767, {"Imp 32",   12}}
          };

          // === Mappe badge ===
          std::map<uint64_t, std::pair<std::string, int>> badge = {
            {509791345,  {"Badge 1", 12}},
            {854418574,  {"Badge 2", 12}},
            {851971486,  {"Badge 3", 12}},
            {2910431538, {"Badge 1", 12}}

          };

          // Verifica impronta
          if (impronte.count(tag)) {
            name = impronte[tag].first;
            relay = impronte[tag].second;
            autorizzato = true;
            std::string combined = name + "(" + timestamp + ")";
            id(user_name_sensor)->publish_state(combined);
            ESP_LOGI("ACCESSO", "Impronta riconosciuta: %s", name.c_str());
            // Aggiorna variabile globale con il nome identificato
            id(tag_name)->publish_state(name);

            id(fingerprint_history).push_back(combined);
            if (id(fingerprint_history).size() > 24)
              id(fingerprint_history).erase(id(fingerprint_history).begin());

            std::string history;
            for (const auto& n : id(fingerprint_history))
              history += n ;  // Modifica qui
            id(fingerprint_scanned_sensor)->publish_state(history);
          }
          // Verifica badge
          else if (badge.count(tag)) {
            name = badge[tag].first;
            relay = badge[tag].second;
            autorizzato = true;
            std::string combined = name + "(" + timestamp + ")";
            id(user_name_sensor)->publish_state(combined);
            ESP_LOGI("ACCESSO", "Badge riconosciuto: %s", name.c_str());
            // Aggiorna variabile globale con il nome identificato
            id(tag_name)->publish_state(name);

            id(tag_history).push_back(combined);
            if (id(tag_history).size() > 24)
              id(tag_history).erase(id(tag_history).begin());

            std::string tag_history_str;
            for (const auto& n : id(tag_history))
              tag_history_str += n ;  // Modifica qui
            id(homeassistant_tag_scanned)->publish_state(tag_history_str);
          }
          // Non autorizzato
          else {
            autorizzato = false;
            ESP_LOGI("ACCESSO", "Tag o impronta NON autorizzato!");
            std::string combined = x + "(" + timestamp + ")";
            id(unauthorized_tags).push_back(combined);
            // Aggiorna variabile globale con il nome identificato
            id(tag_name)->publish_state(x);
            if (id(unauthorized_tags).size() > 24)
              id(unauthorized_tags).erase(id(unauthorized_tags).begin());

            std::string unauthorized_tags_str;
            for (const auto& tag_str : id(unauthorized_tags))
              unauthorized_tags_str += tag_str;  // Modifica qui
            id(unauthorized_tags_sensor)->publish_state(unauthorized_tags_str);
            id(last_unauthorized_tag_code_sensor)->publish_state(combined);   
          }

          // === Attiva relè SOLO se tastiera abilitata ===
          // === e NON IN ALLARME TAMPER ===
          if (id(tag_scan_enabled).state) {
            if (id(tamper_state)) {
              ESP_LOGW("TAMPER", "Tastiera DISABILITATA!!! TAMPER IN ALLARME!!!");
            } else if (autorizzato) {
              if (relay == 1 && !id(accensione_relay1)->is_running())
                id(accensione_relay1)->execute();
              else if (relay == 2 && !id(accensione_relay2)->is_running())
                id(accensione_relay2)->execute();
              else if (relay == 12 && !id(accensione_relay12)->is_running())
                id(accensione_relay12)->execute();
            }
          } else {
            ESP_LOGI("TAG", "Tastiera DISABILITATA");
          }

      - homeassistant.tag_scanned: !lambda 'return id(tag_name).state.c_str();'

script:
  - id: accensione_relay12
    then:
      - script.execute: accensione_relay2 # cancello
      - delay: 2000ms
      - script.execute: accensione_relay1 # portone
      - delay: 3000ms # pausa di 3 secondi tra 2 aperture...

  - id: accensione_relay1 # apri portone
    then:
      - switch.turn_on: relay1
      - delay: 2000ms

  - id: accensione_relay2 # apri cancello
    then:
      - switch.turn_on: relay2
      - delay: 2000ms
 
